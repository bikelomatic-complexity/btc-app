
/*
 * The root div generated by <Card>
 * It's *only child* is a div that contains the header, media, text, etc.
 *
 * On both desktop and mobile, fill the screen up to 500px wide. This has the
 * effect of filling all available width on mobile. On desktop, we center
 * a 500px wide rectangle above the map, because we don't have enough content
 * in the card to merit filling the user's screen.
 *
 * The point card has three states
 *  - peek: The user gets an overview of the point. You can still see the map.
 *  - view: The user gets all the info. Card covers the map.
 *  - rate: The user can view comments and add their own. Card covers the map.
 *
 * The `position` property changes based on the state!
 */
.point-card {
    width: 100%;
    max-width: 500px;
    margin: auto;
    transition: all 300ms ease;
}

/*
 * <Card> in peek mode
 *
 * The card is absolutely positioned over the map, anchored to the bottom.
 * Since the margins are auto, the card will be centered.
 *
 * In peek mode, we hide overflow. The user can expand the card to view the
 * rest of the details. Height is limited to 65% so you can get a good view
 * of the picture and the description, and still see the map behind the card.
 *
 * The card is not a flexbox in peek mode!
 */
.point-card--peek {
    position: absolute;
    height: 65%;
    max-height: 500px;
    bottom: 0;
    left: 0;
    right: 0;
    overflow-y: hidden;
}

/*
 * <Card> in view and rate mode.
 *
 * The card is statically positioned, with flex-grow: 1. The parent container
 * is a columnar flexbox, so the view and rate point cards will fill the
 * entire height of the screen. Also, increase the max-width so the card
 * grows a bit more on Desktop.
 *
 * Override <Card>'s overflow-y property so we can scroll if needed.
 * The card is a flexbox in view and rate mode! This is so the card's contents
 * fill the space in the card.
 */
.point-card--view, .point-card--rate {
    flex-grow: 1;
    max-width: 750px;
    overflow-y: auto !important;
    display: flex;
}

/*
 * <Card> generates a single container div underneath the root div. We need to
 * make this unamed div a columnar flexbox.
 */
.point-card > div {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: flex-start;
    width: inherit;
}

/*
 * In peek mode, we need to set the height of the inner container div to
 * 100%, because the card itself is not a flexbox in peek mode.
 */
.point-card.point-card--peek > div {
    height: 100%;
}

/*
 * Displayed when the contents of a point card are loading
 */
.point-card__spinner {
    flex-grow: 1;
    align-self: center;
}

/*
 * The header contains the point type avatar, the point's name and type, and
 * the card's menu. Flex-shrink is 0 so the header does not dissapear when
 * you shrink the height of the screen.
 */
.point-card__header {
    flex-basis: 72px;
    flex-shrink: 0;
}

/*
 * SVG icon representing the type of the point. We override Material-UI's
 * height and width properties set as inline styles. This causes the icon
 * to fill the height of the card header.
 */
.point-card__avatar {
    height: 100% !important;
    width: auto !important;
}

/*
 * Menu inside the point-card's header.
 */
.point-card__icon-menu {
    float: right;
    height: 40px;
    width: auto;
}

/*
 * Ensure the "hamburger" button inside the icon menu grows to fill the space
 * of the point-cards' header.
 */
.point-card__icon-menu > button {
    height: inherit !important;
    width: auto !important;
    padding: 0px !important;
}

.point-card__scroll {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    overflow-y: auto;
}

/*
 * The point's cover image. The image and the rest of the content should
 * grow equally. So they both have flex-grow: 1.
 *
 * The background image url must be specified via an inline style.
 */
.point-card__media {
    width: inherit;
    flex-basis: 225px;
    flex-grow: 1;
    flex-shrink: 1;
    background-size: cover;
    background-position: center;
    background-color: grey;
}

/*
 * In rate mode, do not show the point's image.
 */
.point-card.point-card--rate .point-card__media {
    display: none;
}

/*
 * Grow the description text at the same rate as the image. In peek mode,
 * the content div has this style. In view and rate mode, the content div
 * has the point-card__content style.
 */
.point-card__description {
    flex-grow: 1;
    flex-shrink: 1;
    overflow-y: hidden;
}

.point-card__open-until {
    color: darkgreen;
}

.point-card__contact > * {
    margin-right: 15px;
}

/*
 * The rest of the card's content. It is a columnar flexbox. This is the
 * div that is scrollable in view and rate mode.
 */
.point-card__content {
    flex-grow: 1;
    flex-shrink: 5;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: flex-start;
}

/*
 * When the card is shrunk, make sure the actions are still visible.
 */
.point-card__actions {
    flex-shrink: 0;
}

/*
 * Style for a row to use inside a <FormBlock>. This row will contain the
 * comment text field and the stars rating field.
 */
.comment-entry {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
}

/*
 * The comment text field should grow to fill all remaining space. However,
 * if the space shinks past the flex-basis, then the parent flexbox should
 * wrap the items.
 */
.comment-entry__comment {
    flex-grow: 1;
    flex-basis: 515px;
    width: auto !important;
    margin-right: 15px;
}

/*
 * When the device screen is too small, the flex items will wrap. Re-order the
 * text box so the stars are on top (this looks better).
 */
@media screen and (max-width: 750px) {
    .comment-entry__comment {
        order: 2;
        margin-right: 0px;
    }
}

.comment-entry__rating {
    flex-shrink: 0;
}
